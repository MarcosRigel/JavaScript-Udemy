# O que é bug e debug?
► Bug: Problema que ocorre no código, muitas vezes por erro do programador, que impede o funcionamento
correto do mesmo;

► Debug: O ato de resolver os bugs encontrados no código ou também a forma que é feita a visualização 
de valores de variáveis ou fluxo do código;

# Strict mode 
► Deixa o JavaScript mais rigoroso na hora de se programar;
► Deve ser declarado no topo de arquivos ou funções;
► Colocar o stric ajuda você a codificar de forma correta e não vai impedir/limitar nada no seu 
software ou programar;
► veja o exemplo de uma variavel declarada sem let/const/var:

    "use strict"
    opa = 'teste';

# Método de debug: console.log
► Um método bastante utilizada para debug, é o console.log;
► Função que estávamos utilizando par amostrar os valores no console;

    let a = 1;
    let b = 2;

    if (a == 1) {
        a = b + 2;
    }

    console.log(a);

    for (i = 0; i < b; i++) {
        a = a + 2;
        console.log(a);
    }

    if (a > 10) {
        a == 25;
    }

# Método de debug: debugger
► Funcionalidade que para o código quando atingir a linha debugger;

let a = 1;
let b = 2;

if (a == 1) {
    a = b + 2;
}

for (let i=0;i<b;i++) {
    a = a + 2;
}

debugger

if (a > 10) {
    a == 25;
}

# Tratamento de input por Função
► Não podemos controlar os dados que o usuário enviar, então para o bom 
funcionamento do software, devemos tratar eles;
► veja um exemplo de tratamento de number:

function checarNumero(valor) {
    let resultado = Number(valor);
    if (Number.isNaN(resultado)) {
        return null;
    }
    else {
        return resultado;
    }
}

console.log(checarNumero(5));
console.log(checarNumero('teste'));

# Esceptions

► Podemos criar erros no programa, caso alguma condição não seja atendida;
► Porém as exceptions abortam o programa, só geram o erro;

let a =1;
if(a != 2) {
    throw new Error("O valor de a não pode ser 1");
}

# Try e catch

► O bloco try catch, vai tentar executar um código, caso não consiga
ele pode retornar o erro que esse código gerou;
► Muito útil para debug;

try {
    let c = a + b;
} catch(error) {
    console.log("Algo deu errado: " + error);
}

# Finally

► Finally é executada independente do resultado do try/catch;
► E pode existir com try e catch ou apenas try;

try {
    let c = a + b;
} catch(error) {
    console.log("Algo deu errado: " + error);
} finally {
    console.log("Executou");
}

# Assertions
► Verificações no programa, que são utilizadas para assegurar que tudo ocorra da forma
esperada:

function iterarArray(arr) {
    if(arr.length == 0) {
        throw new Error("O array precisa ter elementos");
    }
    else {
        for(let i=0;i<arr.length;i++) {
            console.log(arr[i]);
        }
    }
}